                    CPU SCHEDULING
  1.FCFS [FIRST COME FIRST SERVE]


1. First-come, First served is the simplest scheduling algorithm.
2. Ready queue is a FIFO queue.
3. Longest waiting process at the front of queue.
4. New ready processes join the rear.
5. Non-preemptive: executes until voluntarily gives up CPU finished or waits for some event.
6. Convoy Effect Problem: CPU bound process may execute a long CPU burst processes, so the processes with very short CPU bursts, wait in queue Reduces CPU and I/O device utilization.
   
   
IMPLEMENTATION :

1.Input the processes along with their burst time.
2.Find waiting time for all processes.
3.As first process that comes need not to wait,so wt[0]=0.
4.Find wt for all remaining processes i.e., wt[i] = bt[i-1] + wt[i-1].
5.Find tat = wt + bt for all processes.
6.Find average wt = total_wt / number of processes.
7.Find average tat = total_tat / number of processes.

    2.SJF [SHORTEST JOB FIRST]
   Solution to the Convoy Effect problem.
	 Assume the next burst time of each process is known
	 SJF selects process which has the shortest burst time
	 Optimal algorithm because it has the shortest average waiting time
	 Equal burst time processes are scheduled in FCFS order
	 Impossible to know in advance
	 OS knows the past burst times- make a prediction using an average
	 Non-preemptive Or preemptive.
	
	Implementation : 
	
	1.Input the processes along with their burst time.
	2.Sort the processes according to their burst time.
	3.Find waiting time for all processes as Waiting time (Wt) = TAT - BT
	4.Find turn around time for all processes as Turan Around Time (tat) = wt + Bt
	5.Calculate average waiting time and average turn around time.
  
       3.PRIORITY SCHEDULING
   Assume a priority is associated with each process.
	 Assume all processes arrive at the same time.
	 Select highest priority process from the ready queue.
	 SJF is a special case of priority scheduling.
	 Equal-priority processes are scheduled in FCFS order.
	 Priorities can be defined internally
	 Memory requirements, number of open files, burst times
	 Priorities can be defined externally
	 Preemptive or Non-preemptive
	
	
	Implementation:
	
	1.First input the processes with their burst time and priority.
	2.Sort the processes,burst time and priority according to the priority.
	3.Now, apply FCFS on the processes.
	4.Calculate average waiting time and turn around time.
  
       4.ROUND ROBIN SCHEDULING
   Similar to FCFS, but preemption to switch between processes
	 Time quantum(time slice) is a small unit of time (10 to 100 ms)
	 Process is executed on the CPU for at most one-time quantum
	 Implemented by using the ready queue as a circular queue
	 Head process gets the CPU
	 Uses less than a time quantum implies gives up the CPU voluntary
	 Uses full time quantum implies timer will cause an interrupt
	 Context switch will be executed
	 Process will be put at the tail of queue
	 Preemptive
	
	
	Implementation:
	
	1.Create an array temp[] to keep track of remaining burst time of processes.
	2.Create another array wt[] to store waiting times of processes.Initialize this array as 0.
	3.Initialize time t=0.
	4.Keep traversing all the processes while all processes are not done.Do following (i)th process if it is not done yet.
	      a-If temp[i]>quantum
	          t=t+quantum
	          temp[i]-=quantum
	      b-Else
	          t=t+temp[i]
	          wt[i]=t-bt[i]
	          t[i]=0
	5.Once we calculate waiting times,we can compute tat[i] as wt[i]+bt[i].
	6.calculate average waiting and turn around time of given processes.
  
